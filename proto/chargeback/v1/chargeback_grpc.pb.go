// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.6
// source: proto/chargeback/v1/chargeback.proto

package chargebackv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ChargebackService_GetChargeback_FullMethodName   = "/chargeback.v1.ChargebackService/GetChargeback"
	ChargebackService_ListChargebacks_FullMethodName = "/chargeback.v1.ChargebackService/ListChargebacks"
)

// ChargebackServiceClient is the client API for ChargebackService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ChargebackService handles dispute management operations (read-only)
// Note: North API does not provide write operations for disputes.
// Merchants must respond to chargebacks through North's web portal.
type ChargebackServiceClient interface {
	// GetChargeback retrieves a specific chargeback by ID
	GetChargeback(ctx context.Context, in *GetChargebackRequest, opts ...grpc.CallOption) (*Chargeback, error)
	// ListChargebacks lists chargebacks with filters
	ListChargebacks(ctx context.Context, in *ListChargebacksRequest, opts ...grpc.CallOption) (*ListChargebacksResponse, error)
}

type chargebackServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChargebackServiceClient(cc grpc.ClientConnInterface) ChargebackServiceClient {
	return &chargebackServiceClient{cc}
}

func (c *chargebackServiceClient) GetChargeback(ctx context.Context, in *GetChargebackRequest, opts ...grpc.CallOption) (*Chargeback, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Chargeback)
	err := c.cc.Invoke(ctx, ChargebackService_GetChargeback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chargebackServiceClient) ListChargebacks(ctx context.Context, in *ListChargebacksRequest, opts ...grpc.CallOption) (*ListChargebacksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListChargebacksResponse)
	err := c.cc.Invoke(ctx, ChargebackService_ListChargebacks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChargebackServiceServer is the server API for ChargebackService service.
// All implementations must embed UnimplementedChargebackServiceServer
// for forward compatibility.
//
// ChargebackService handles dispute management operations (read-only)
// Note: North API does not provide write operations for disputes.
// Merchants must respond to chargebacks through North's web portal.
type ChargebackServiceServer interface {
	// GetChargeback retrieves a specific chargeback by ID
	GetChargeback(context.Context, *GetChargebackRequest) (*Chargeback, error)
	// ListChargebacks lists chargebacks with filters
	ListChargebacks(context.Context, *ListChargebacksRequest) (*ListChargebacksResponse, error)
	mustEmbedUnimplementedChargebackServiceServer()
}

// UnimplementedChargebackServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChargebackServiceServer struct{}

func (UnimplementedChargebackServiceServer) GetChargeback(context.Context, *GetChargebackRequest) (*Chargeback, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChargeback not implemented")
}
func (UnimplementedChargebackServiceServer) ListChargebacks(context.Context, *ListChargebacksRequest) (*ListChargebacksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChargebacks not implemented")
}
func (UnimplementedChargebackServiceServer) mustEmbedUnimplementedChargebackServiceServer() {}
func (UnimplementedChargebackServiceServer) testEmbeddedByValue()                           {}

// UnsafeChargebackServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChargebackServiceServer will
// result in compilation errors.
type UnsafeChargebackServiceServer interface {
	mustEmbedUnimplementedChargebackServiceServer()
}

func RegisterChargebackServiceServer(s grpc.ServiceRegistrar, srv ChargebackServiceServer) {
	// If the following call pancis, it indicates UnimplementedChargebackServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ChargebackService_ServiceDesc, srv)
}

func _ChargebackService_GetChargeback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChargebackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChargebackServiceServer).GetChargeback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChargebackService_GetChargeback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChargebackServiceServer).GetChargeback(ctx, req.(*GetChargebackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChargebackService_ListChargebacks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChargebacksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChargebackServiceServer).ListChargebacks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChargebackService_ListChargebacks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChargebackServiceServer).ListChargebacks(ctx, req.(*ListChargebacksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChargebackService_ServiceDesc is the grpc.ServiceDesc for ChargebackService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChargebackService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chargeback.v1.ChargebackService",
	HandlerType: (*ChargebackServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChargeback",
			Handler:    _ChargebackService_GetChargeback_Handler,
		},
		{
			MethodName: "ListChargebacks",
			Handler:    _ChargebackService_ListChargebacks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/chargeback/v1/chargeback.proto",
}

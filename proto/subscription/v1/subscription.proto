syntax = "proto3";

package subscription.v1;

option go_package = "github.com/kevin07696/payment-service/proto/subscription/v1;subscriptionv1";

import "google/protobuf/timestamp.proto";

// IntervalUnit defines the time unit for billing intervals
// Matches database constraint: ('day', 'week', 'month', 'year')
enum IntervalUnit {
  INTERVAL_UNIT_UNSPECIFIED = 0;
  INTERVAL_UNIT_DAY = 1;
  INTERVAL_UNIT_WEEK = 2;
  INTERVAL_UNIT_MONTH = 3;
  INTERVAL_UNIT_YEAR = 4;
}

// SubscriptionStatus represents the subscription state
// Matches database constraint: ('active', 'paused', 'cancelled', 'past_due')
enum SubscriptionStatus {
  SUBSCRIPTION_STATUS_UNSPECIFIED = 0;
  SUBSCRIPTION_STATUS_ACTIVE = 1;
  SUBSCRIPTION_STATUS_PAUSED = 2;
  SUBSCRIPTION_STATUS_CANCELLED = 3;
  SUBSCRIPTION_STATUS_PAST_DUE = 4;
}

// SubscriptionService handles recurring billing operations
service SubscriptionService {
  // CreateSubscription creates a new recurring billing subscription
  rpc CreateSubscription(CreateSubscriptionRequest) returns (SubscriptionResponse);

  // UpdateSubscription updates subscription properties
  rpc UpdateSubscription(UpdateSubscriptionRequest) returns (SubscriptionResponse);

  // CancelSubscription cancels an active subscription
  rpc CancelSubscription(CancelSubscriptionRequest) returns (SubscriptionResponse);

  // PauseSubscription pauses an active subscription
  rpc PauseSubscription(PauseSubscriptionRequest) returns (SubscriptionResponse);

  // ResumeSubscription resumes a paused subscription
  rpc ResumeSubscription(ResumeSubscriptionRequest) returns (SubscriptionResponse);

  // GetSubscription retrieves subscription details
  rpc GetSubscription(GetSubscriptionRequest) returns (Subscription);

  // ListCustomerSubscriptions lists all subscriptions for a customer
  rpc ListCustomerSubscriptions(ListCustomerSubscriptionsRequest) returns (ListCustomerSubscriptionsResponse);

  // ProcessDueBilling processes subscriptions due for billing (internal/admin use)
  rpc ProcessDueBilling(ProcessDueBillingRequest) returns (ProcessDueBillingResponse);
}

// CreateSubscriptionRequest creates a new subscription
message CreateSubscriptionRequest {
  string agent_id = 1;
  string customer_id = 2;
  string amount = 3; // Decimal as string
  string currency = 4;

  // Billing interval (e.g., 1 month, 2 weeks, 3 months)
  int32 interval_value = 5; // 1, 2, 3, etc.
  IntervalUnit interval_unit = 6; // day, week, month, year

  string payment_method_id = 7; // UUID of saved payment method
  google.protobuf.Timestamp start_date = 8;
  int32 max_retries = 9; // Default: 3
  map<string, string> metadata = 10;
  string idempotency_key = 11;
}

// UpdateSubscriptionRequest updates subscription properties
message UpdateSubscriptionRequest {
  string subscription_id = 1;
  optional string amount = 2; // Optional: update amount
  optional int32 interval_value = 3; // Optional: update interval value
  optional IntervalUnit interval_unit = 4; // Optional: update interval unit
  optional string payment_method_id = 5; // Optional: update payment method
  string idempotency_key = 6;
}

// CancelSubscriptionRequest cancels a subscription
message CancelSubscriptionRequest {
  string subscription_id = 1;
  bool cancel_at_period_end = 2; // If true, cancel after current billing period
  string reason = 3;
  string idempotency_key = 4;
}

// PauseSubscriptionRequest pauses a subscription
message PauseSubscriptionRequest {
  string subscription_id = 1;
}

// ResumeSubscriptionRequest resumes a subscription
message ResumeSubscriptionRequest {
  string subscription_id = 1;
}

// GetSubscriptionRequest retrieves a subscription
message GetSubscriptionRequest {
  string subscription_id = 1;
}

// ListCustomerSubscriptionsRequest lists customer subscriptions
message ListCustomerSubscriptionsRequest {
  string agent_id = 1;
  string customer_id = 2;
  optional SubscriptionStatus status = 3; // Optional: filter by status
}

// ListCustomerSubscriptionsResponse contains subscription list
message ListCustomerSubscriptionsResponse {
  repeated Subscription subscriptions = 1;
}

// ProcessDueBillingRequest processes billing batch
message ProcessDueBillingRequest {
  google.protobuf.Timestamp as_of_date = 1;
  int32 batch_size = 2; // Default: 100
}

// ProcessDueBillingResponse contains billing results
message ProcessDueBillingResponse {
  int32 processed_count = 1;
  int32 success_count = 2;
  int32 failed_count = 3;
  int32 skipped_count = 4;
  repeated BillingError errors = 5;
}

// BillingError represents a billing failure
message BillingError {
  string subscription_id = 1;
  string customer_id = 2;
  string error = 3;
  bool retriable = 4;
}

// SubscriptionResponse is returned from subscription operations
message SubscriptionResponse {
  string subscription_id = 1;
  string agent_id = 2;
  string customer_id = 3;
  string amount = 4;
  string currency = 5;

  // Billing interval
  int32 interval_value = 6;
  IntervalUnit interval_unit = 7;

  SubscriptionStatus status = 8;
  string payment_method_id = 9; // UUID of saved payment method
  google.protobuf.Timestamp next_billing_date = 10;
  string gateway_subscription_id = 11;
  google.protobuf.Timestamp created_at = 12;
  google.protobuf.Timestamp updated_at = 13;
  optional google.protobuf.Timestamp cancelled_at = 14;
}

// Subscription represents a complete subscription record
message Subscription {
  string id = 1;
  string agent_id = 2;
  string customer_id = 3;
  string amount = 4;
  string currency = 5;

  // Billing interval
  int32 interval_value = 6;
  IntervalUnit interval_unit = 7;

  SubscriptionStatus status = 8;
  string payment_method_id = 9; // UUID of saved payment method
  google.protobuf.Timestamp next_billing_date = 10;
  string gateway_subscription_id = 11;
  int32 failure_retry_count = 12;
  int32 max_retries = 13;
  google.protobuf.Timestamp created_at = 14;
  google.protobuf.Timestamp updated_at = 15;
  optional google.protobuf.Timestamp cancelled_at = 16;
  map<string, string> metadata = 17;
}

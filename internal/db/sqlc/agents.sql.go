// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: agents.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const activateAgent = `-- name: ActivateAgent :exec
UPDATE agent_credentials
SET is_active = true, updated_at = CURRENT_TIMESTAMP
WHERE agent_id = $1
`

func (q *Queries) ActivateAgent(ctx context.Context, agentID string) error {
	_, err := q.db.Exec(ctx, activateAgent, agentID)
	return err
}

const agentExists = `-- name: AgentExists :one
SELECT EXISTS(SELECT 1 FROM agent_credentials WHERE agent_id = $1)
`

func (q *Queries) AgentExists(ctx context.Context, agentID string) (bool, error) {
	row := q.db.QueryRow(ctx, agentExists, agentID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const countAgents = `-- name: CountAgents :one
SELECT COUNT(*) FROM agent_credentials
WHERE
    ($1::varchar IS NULL OR environment = $1) AND
    ($2::boolean IS NULL OR is_active = $2)
`

type CountAgentsParams struct {
	Environment pgtype.Text `json:"environment"`
	IsActive    pgtype.Bool `json:"is_active"`
}

func (q *Queries) CountAgents(ctx context.Context, arg CountAgentsParams) (int64, error) {
	row := q.db.QueryRow(ctx, countAgents, arg.Environment, arg.IsActive)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createAgent = `-- name: CreateAgent :one
INSERT INTO agent_credentials (
    id, agent_id, cust_nbr, merch_nbr, dba_nbr, terminal_nbr,
    mac_secret_path, environment, is_active, agent_name
) VALUES (
    $1, $2, $3, $4, $5, $6,
    $7, $8, $9, $10
) RETURNING id, agent_id, mac_secret_path, cust_nbr, merch_nbr, dba_nbr, terminal_nbr, environment, agent_name, is_active, deleted_at, created_at, updated_at
`

type CreateAgentParams struct {
	ID            uuid.UUID   `json:"id"`
	AgentID       string      `json:"agent_id"`
	CustNbr       string      `json:"cust_nbr"`
	MerchNbr      string      `json:"merch_nbr"`
	DbaNbr        string      `json:"dba_nbr"`
	TerminalNbr   string      `json:"terminal_nbr"`
	MacSecretPath string      `json:"mac_secret_path"`
	Environment   string      `json:"environment"`
	IsActive      pgtype.Bool `json:"is_active"`
	AgentName     string      `json:"agent_name"`
}

func (q *Queries) CreateAgent(ctx context.Context, arg CreateAgentParams) (AgentCredential, error) {
	row := q.db.QueryRow(ctx, createAgent,
		arg.ID,
		arg.AgentID,
		arg.CustNbr,
		arg.MerchNbr,
		arg.DbaNbr,
		arg.TerminalNbr,
		arg.MacSecretPath,
		arg.Environment,
		arg.IsActive,
		arg.AgentName,
	)
	var i AgentCredential
	err := row.Scan(
		&i.ID,
		&i.AgentID,
		&i.MacSecretPath,
		&i.CustNbr,
		&i.MerchNbr,
		&i.DbaNbr,
		&i.TerminalNbr,
		&i.Environment,
		&i.AgentName,
		&i.IsActive,
		&i.DeletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deactivateAgent = `-- name: DeactivateAgent :exec
UPDATE agent_credentials
SET is_active = false, updated_at = CURRENT_TIMESTAMP
WHERE agent_id = $1
`

func (q *Queries) DeactivateAgent(ctx context.Context, agentID string) error {
	_, err := q.db.Exec(ctx, deactivateAgent, agentID)
	return err
}

const getAgentByAgentID = `-- name: GetAgentByAgentID :one
SELECT id, agent_id, mac_secret_path, cust_nbr, merch_nbr, dba_nbr, terminal_nbr, environment, agent_name, is_active, deleted_at, created_at, updated_at FROM agent_credentials
WHERE agent_id = $1
`

func (q *Queries) GetAgentByAgentID(ctx context.Context, agentID string) (AgentCredential, error) {
	row := q.db.QueryRow(ctx, getAgentByAgentID, agentID)
	var i AgentCredential
	err := row.Scan(
		&i.ID,
		&i.AgentID,
		&i.MacSecretPath,
		&i.CustNbr,
		&i.MerchNbr,
		&i.DbaNbr,
		&i.TerminalNbr,
		&i.Environment,
		&i.AgentName,
		&i.IsActive,
		&i.DeletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAgentByID = `-- name: GetAgentByID :one
SELECT id, agent_id, mac_secret_path, cust_nbr, merch_nbr, dba_nbr, terminal_nbr, environment, agent_name, is_active, deleted_at, created_at, updated_at FROM agent_credentials
WHERE id = $1
`

func (q *Queries) GetAgentByID(ctx context.Context, id uuid.UUID) (AgentCredential, error) {
	row := q.db.QueryRow(ctx, getAgentByID, id)
	var i AgentCredential
	err := row.Scan(
		&i.ID,
		&i.AgentID,
		&i.MacSecretPath,
		&i.CustNbr,
		&i.MerchNbr,
		&i.DbaNbr,
		&i.TerminalNbr,
		&i.Environment,
		&i.AgentName,
		&i.IsActive,
		&i.DeletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listActiveAgents = `-- name: ListActiveAgents :many
SELECT id, agent_id, mac_secret_path, cust_nbr, merch_nbr, dba_nbr, terminal_nbr, environment, agent_name, is_active, deleted_at, created_at, updated_at FROM agent_credentials
WHERE is_active = true
ORDER BY created_at DESC
`

func (q *Queries) ListActiveAgents(ctx context.Context) ([]AgentCredential, error) {
	rows, err := q.db.Query(ctx, listActiveAgents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AgentCredential{}
	for rows.Next() {
		var i AgentCredential
		if err := rows.Scan(
			&i.ID,
			&i.AgentID,
			&i.MacSecretPath,
			&i.CustNbr,
			&i.MerchNbr,
			&i.DbaNbr,
			&i.TerminalNbr,
			&i.Environment,
			&i.AgentName,
			&i.IsActive,
			&i.DeletedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAgents = `-- name: ListAgents :many
SELECT id, agent_id, mac_secret_path, cust_nbr, merch_nbr, dba_nbr, terminal_nbr, environment, agent_name, is_active, deleted_at, created_at, updated_at FROM agent_credentials
WHERE
    ($1::varchar IS NULL OR environment = $1) AND
    ($2::boolean IS NULL OR is_active = $2)
ORDER BY created_at DESC
LIMIT $4 OFFSET $3
`

type ListAgentsParams struct {
	Environment pgtype.Text `json:"environment"`
	IsActive    pgtype.Bool `json:"is_active"`
	OffsetVal   int32       `json:"offset_val"`
	LimitVal    int32       `json:"limit_val"`
}

func (q *Queries) ListAgents(ctx context.Context, arg ListAgentsParams) ([]AgentCredential, error) {
	rows, err := q.db.Query(ctx, listAgents,
		arg.Environment,
		arg.IsActive,
		arg.OffsetVal,
		arg.LimitVal,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AgentCredential{}
	for rows.Next() {
		var i AgentCredential
		if err := rows.Scan(
			&i.ID,
			&i.AgentID,
			&i.MacSecretPath,
			&i.CustNbr,
			&i.MerchNbr,
			&i.DbaNbr,
			&i.TerminalNbr,
			&i.Environment,
			&i.AgentName,
			&i.IsActive,
			&i.DeletedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAgent = `-- name: UpdateAgent :one
UPDATE agent_credentials
SET
    cust_nbr = $1,
    merch_nbr = $2,
    dba_nbr = $3,
    terminal_nbr = $4,
    environment = $5,
    agent_name = $6,
    updated_at = CURRENT_TIMESTAMP
WHERE agent_id = $7
RETURNING id, agent_id, mac_secret_path, cust_nbr, merch_nbr, dba_nbr, terminal_nbr, environment, agent_name, is_active, deleted_at, created_at, updated_at
`

type UpdateAgentParams struct {
	CustNbr     string `json:"cust_nbr"`
	MerchNbr    string `json:"merch_nbr"`
	DbaNbr      string `json:"dba_nbr"`
	TerminalNbr string `json:"terminal_nbr"`
	Environment string `json:"environment"`
	AgentName   string `json:"agent_name"`
	AgentID     string `json:"agent_id"`
}

func (q *Queries) UpdateAgent(ctx context.Context, arg UpdateAgentParams) (AgentCredential, error) {
	row := q.db.QueryRow(ctx, updateAgent,
		arg.CustNbr,
		arg.MerchNbr,
		arg.DbaNbr,
		arg.TerminalNbr,
		arg.Environment,
		arg.AgentName,
		arg.AgentID,
	)
	var i AgentCredential
	err := row.Scan(
		&i.ID,
		&i.AgentID,
		&i.MacSecretPath,
		&i.CustNbr,
		&i.MerchNbr,
		&i.DbaNbr,
		&i.TerminalNbr,
		&i.Environment,
		&i.AgentName,
		&i.IsActive,
		&i.DeletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateAgentMACPath = `-- name: UpdateAgentMACPath :exec
UPDATE agent_credentials
SET mac_secret_path = $1, updated_at = CURRENT_TIMESTAMP
WHERE agent_id = $2
`

type UpdateAgentMACPathParams struct {
	MacSecretPath string `json:"mac_secret_path"`
	AgentID       string `json:"agent_id"`
}

func (q *Queries) UpdateAgentMACPath(ctx context.Context, arg UpdateAgentMACPathParams) error {
	_, err := q.db.Exec(ctx, updateAgentMACPath, arg.MacSecretPath, arg.AgentID)
	return err
}

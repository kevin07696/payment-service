// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: subscriptions.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createSubscription = `-- name: CreateSubscription :exec
INSERT INTO subscriptions (
    id, merchant_id, customer_id, amount, currency, frequency, status,
    payment_method_token, next_billing_date, max_retries, failure_option,
    gateway_subscription_id, metadata
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13
)
`

type CreateSubscriptionParams struct {
	ID                    uuid.UUID      `json:"id"`
	MerchantID            string         `json:"merchant_id"`
	CustomerID            string         `json:"customer_id"`
	Amount                pgtype.Numeric `json:"amount"`
	Currency              string         `json:"currency"`
	Frequency             string         `json:"frequency"`
	Status                string         `json:"status"`
	PaymentMethodToken    string         `json:"payment_method_token"`
	NextBillingDate       pgtype.Date    `json:"next_billing_date"`
	MaxRetries            int32          `json:"max_retries"`
	FailureOption         string         `json:"failure_option"`
	GatewaySubscriptionID pgtype.Text    `json:"gateway_subscription_id"`
	Metadata              []byte         `json:"metadata"`
}

func (q *Queries) CreateSubscription(ctx context.Context, arg CreateSubscriptionParams) error {
	_, err := q.db.Exec(ctx, createSubscription,
		arg.ID,
		arg.MerchantID,
		arg.CustomerID,
		arg.Amount,
		arg.Currency,
		arg.Frequency,
		arg.Status,
		arg.PaymentMethodToken,
		arg.NextBillingDate,
		arg.MaxRetries,
		arg.FailureOption,
		arg.GatewaySubscriptionID,
		arg.Metadata,
	)
	return err
}

const getSubscriptionByID = `-- name: GetSubscriptionByID :one
SELECT id, merchant_id, customer_id, amount, currency, frequency, status, payment_method_token, next_billing_date, failure_retry_count, max_retries, failure_option, gateway_subscription_id, metadata, created_at, updated_at, cancelled_at FROM subscriptions
WHERE id = $1
`

func (q *Queries) GetSubscriptionByID(ctx context.Context, id uuid.UUID) (Subscription, error) {
	row := q.db.QueryRow(ctx, getSubscriptionByID, id)
	var i Subscription
	err := row.Scan(
		&i.ID,
		&i.MerchantID,
		&i.CustomerID,
		&i.Amount,
		&i.Currency,
		&i.Frequency,
		&i.Status,
		&i.PaymentMethodToken,
		&i.NextBillingDate,
		&i.FailureRetryCount,
		&i.MaxRetries,
		&i.FailureOption,
		&i.GatewaySubscriptionID,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CancelledAt,
	)
	return i, err
}

const listActiveSubscriptionsDueForBilling = `-- name: ListActiveSubscriptionsDueForBilling :many
SELECT id, merchant_id, customer_id, amount, currency, frequency, status, payment_method_token, next_billing_date, failure_retry_count, max_retries, failure_option, gateway_subscription_id, metadata, created_at, updated_at, cancelled_at FROM subscriptions
WHERE status = 'active'
  AND next_billing_date <= $1
ORDER BY next_billing_date ASC
LIMIT $2
`

type ListActiveSubscriptionsDueForBillingParams struct {
	NextBillingDate pgtype.Date `json:"next_billing_date"`
	Limit           int32       `json:"limit"`
}

func (q *Queries) ListActiveSubscriptionsDueForBilling(ctx context.Context, arg ListActiveSubscriptionsDueForBillingParams) ([]Subscription, error) {
	rows, err := q.db.Query(ctx, listActiveSubscriptionsDueForBilling, arg.NextBillingDate, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Subscription{}
	for rows.Next() {
		var i Subscription
		if err := rows.Scan(
			&i.ID,
			&i.MerchantID,
			&i.CustomerID,
			&i.Amount,
			&i.Currency,
			&i.Frequency,
			&i.Status,
			&i.PaymentMethodToken,
			&i.NextBillingDate,
			&i.FailureRetryCount,
			&i.MaxRetries,
			&i.FailureOption,
			&i.GatewaySubscriptionID,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CancelledAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSubscriptionsByCustomer = `-- name: ListSubscriptionsByCustomer :many
SELECT id, merchant_id, customer_id, amount, currency, frequency, status, payment_method_token, next_billing_date, failure_retry_count, max_retries, failure_option, gateway_subscription_id, metadata, created_at, updated_at, cancelled_at FROM subscriptions
WHERE merchant_id = $1 AND customer_id = $2
ORDER BY created_at DESC
`

type ListSubscriptionsByCustomerParams struct {
	MerchantID string `json:"merchant_id"`
	CustomerID string `json:"customer_id"`
}

func (q *Queries) ListSubscriptionsByCustomer(ctx context.Context, arg ListSubscriptionsByCustomerParams) ([]Subscription, error) {
	rows, err := q.db.Query(ctx, listSubscriptionsByCustomer, arg.MerchantID, arg.CustomerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Subscription{}
	for rows.Next() {
		var i Subscription
		if err := rows.Scan(
			&i.ID,
			&i.MerchantID,
			&i.CustomerID,
			&i.Amount,
			&i.Currency,
			&i.Frequency,
			&i.Status,
			&i.PaymentMethodToken,
			&i.NextBillingDate,
			&i.FailureRetryCount,
			&i.MaxRetries,
			&i.FailureOption,
			&i.GatewaySubscriptionID,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CancelledAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSubscription = `-- name: UpdateSubscription :exec
UPDATE subscriptions
SET amount = COALESCE($2, amount),
    frequency = COALESCE($3, frequency),
    status = COALESCE($4, status),
    payment_method_token = COALESCE($5, payment_method_token),
    next_billing_date = COALESCE($6, next_billing_date),
    failure_retry_count = COALESCE($7, failure_retry_count),
    gateway_subscription_id = COALESCE($8, gateway_subscription_id),
    cancelled_at = $9
WHERE id = $1
`

type UpdateSubscriptionParams struct {
	ID                    uuid.UUID          `json:"id"`
	Amount                pgtype.Numeric     `json:"amount"`
	Frequency             pgtype.Text        `json:"frequency"`
	Status                pgtype.Text        `json:"status"`
	PaymentMethodToken    pgtype.Text        `json:"payment_method_token"`
	NextBillingDate       pgtype.Date        `json:"next_billing_date"`
	FailureRetryCount     pgtype.Int4        `json:"failure_retry_count"`
	GatewaySubscriptionID pgtype.Text        `json:"gateway_subscription_id"`
	CancelledAt           pgtype.Timestamptz `json:"cancelled_at"`
}

func (q *Queries) UpdateSubscription(ctx context.Context, arg UpdateSubscriptionParams) error {
	_, err := q.db.Exec(ctx, updateSubscription,
		arg.ID,
		arg.Amount,
		arg.Frequency,
		arg.Status,
		arg.PaymentMethodToken,
		arg.NextBillingDate,
		arg.FailureRetryCount,
		arg.GatewaySubscriptionID,
		arg.CancelledAt,
	)
	return err
}

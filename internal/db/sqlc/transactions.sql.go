// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: transactions.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const countTransactions = `-- name: CountTransactions :one
SELECT COUNT(*) FROM transactions
WHERE
    ($1::varchar IS NULL OR agent_id = $1) AND
    ($2::varchar IS NULL OR customer_id = $2) AND
    ($3::uuid IS NULL OR group_id = $3) AND
    ($4::varchar IS NULL OR status = $4) AND
    ($5::varchar IS NULL OR type = $5) AND
    ($6::uuid IS NULL OR payment_method_id = $6)
`

type CountTransactionsParams struct {
	AgentID         pgtype.Text `json:"agent_id"`
	CustomerID      pgtype.Text `json:"customer_id"`
	GroupID         pgtype.UUID `json:"group_id"`
	Status          pgtype.Text `json:"status"`
	Type            pgtype.Text `json:"type"`
	PaymentMethodID pgtype.UUID `json:"payment_method_id"`
}

func (q *Queries) CountTransactions(ctx context.Context, arg CountTransactionsParams) (int64, error) {
	row := q.db.QueryRow(ctx, countTransactions,
		arg.AgentID,
		arg.CustomerID,
		arg.GroupID,
		arg.Status,
		arg.Type,
		arg.PaymentMethodID,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (
    id, group_id, agent_id, customer_id,
    amount, currency, status, type, payment_method_type, payment_method_id,
    auth_guid, auth_resp, auth_code, auth_resp_text, auth_card_type, auth_avs, auth_cvv2,
    idempotency_key, metadata
) VALUES (
    $1, $2, $3, $4,
    $5, $6, $7, $8, $9, $10,
    $11, $12, $13, $14, $15, $16, $17,
    $18, $19
) RETURNING id, group_id, agent_id, customer_id, amount, currency, status, type, payment_method_type, payment_method_id, auth_guid, auth_resp, auth_code, auth_resp_text, auth_card_type, auth_avs, auth_cvv2, idempotency_key, metadata, deleted_at, created_at, updated_at
`

type CreateTransactionParams struct {
	ID                uuid.UUID      `json:"id"`
	GroupID           uuid.UUID      `json:"group_id"`
	AgentID           string         `json:"agent_id"`
	CustomerID        pgtype.Text    `json:"customer_id"`
	Amount            pgtype.Numeric `json:"amount"`
	Currency          string         `json:"currency"`
	Status            string         `json:"status"`
	Type              string         `json:"type"`
	PaymentMethodType string         `json:"payment_method_type"`
	PaymentMethodID   pgtype.UUID    `json:"payment_method_id"`
	AuthGuid          pgtype.Text    `json:"auth_guid"`
	AuthResp          pgtype.Text    `json:"auth_resp"`
	AuthCode          pgtype.Text    `json:"auth_code"`
	AuthRespText      pgtype.Text    `json:"auth_resp_text"`
	AuthCardType      pgtype.Text    `json:"auth_card_type"`
	AuthAvs           pgtype.Text    `json:"auth_avs"`
	AuthCvv2          pgtype.Text    `json:"auth_cvv2"`
	IdempotencyKey    pgtype.Text    `json:"idempotency_key"`
	Metadata          []byte         `json:"metadata"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRow(ctx, createTransaction,
		arg.ID,
		arg.GroupID,
		arg.AgentID,
		arg.CustomerID,
		arg.Amount,
		arg.Currency,
		arg.Status,
		arg.Type,
		arg.PaymentMethodType,
		arg.PaymentMethodID,
		arg.AuthGuid,
		arg.AuthResp,
		arg.AuthCode,
		arg.AuthRespText,
		arg.AuthCardType,
		arg.AuthAvs,
		arg.AuthCvv2,
		arg.IdempotencyKey,
		arg.Metadata,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.GroupID,
		&i.AgentID,
		&i.CustomerID,
		&i.Amount,
		&i.Currency,
		&i.Status,
		&i.Type,
		&i.PaymentMethodType,
		&i.PaymentMethodID,
		&i.AuthGuid,
		&i.AuthResp,
		&i.AuthCode,
		&i.AuthRespText,
		&i.AuthCardType,
		&i.AuthAvs,
		&i.AuthCvv2,
		&i.IdempotencyKey,
		&i.Metadata,
		&i.DeletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTransactionByID = `-- name: GetTransactionByID :one
SELECT id, group_id, agent_id, customer_id, amount, currency, status, type, payment_method_type, payment_method_id, auth_guid, auth_resp, auth_code, auth_resp_text, auth_card_type, auth_avs, auth_cvv2, idempotency_key, metadata, deleted_at, created_at, updated_at FROM transactions
WHERE id = $1
`

func (q *Queries) GetTransactionByID(ctx context.Context, id uuid.UUID) (Transaction, error) {
	row := q.db.QueryRow(ctx, getTransactionByID, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.GroupID,
		&i.AgentID,
		&i.CustomerID,
		&i.Amount,
		&i.Currency,
		&i.Status,
		&i.Type,
		&i.PaymentMethodType,
		&i.PaymentMethodID,
		&i.AuthGuid,
		&i.AuthResp,
		&i.AuthCode,
		&i.AuthRespText,
		&i.AuthCardType,
		&i.AuthAvs,
		&i.AuthCvv2,
		&i.IdempotencyKey,
		&i.Metadata,
		&i.DeletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTransactionByIdempotencyKey = `-- name: GetTransactionByIdempotencyKey :one
SELECT id, group_id, agent_id, customer_id, amount, currency, status, type, payment_method_type, payment_method_id, auth_guid, auth_resp, auth_code, auth_resp_text, auth_card_type, auth_avs, auth_cvv2, idempotency_key, metadata, deleted_at, created_at, updated_at FROM transactions
WHERE idempotency_key = $1
`

func (q *Queries) GetTransactionByIdempotencyKey(ctx context.Context, idempotencyKey pgtype.Text) (Transaction, error) {
	row := q.db.QueryRow(ctx, getTransactionByIdempotencyKey, idempotencyKey)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.GroupID,
		&i.AgentID,
		&i.CustomerID,
		&i.Amount,
		&i.Currency,
		&i.Status,
		&i.Type,
		&i.PaymentMethodType,
		&i.PaymentMethodID,
		&i.AuthGuid,
		&i.AuthResp,
		&i.AuthCode,
		&i.AuthRespText,
		&i.AuthCardType,
		&i.AuthAvs,
		&i.AuthCvv2,
		&i.IdempotencyKey,
		&i.Metadata,
		&i.DeletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTransactionsByGroupID = `-- name: GetTransactionsByGroupID :many
SELECT id, group_id, agent_id, customer_id, amount, currency, status, type, payment_method_type, payment_method_id, auth_guid, auth_resp, auth_code, auth_resp_text, auth_card_type, auth_avs, auth_cvv2, idempotency_key, metadata, deleted_at, created_at, updated_at FROM transactions
WHERE group_id = $1
ORDER BY created_at ASC
`

func (q *Queries) GetTransactionsByGroupID(ctx context.Context, groupID uuid.UUID) ([]Transaction, error) {
	rows, err := q.db.Query(ctx, getTransactionsByGroupID, groupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transaction{}
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.GroupID,
			&i.AgentID,
			&i.CustomerID,
			&i.Amount,
			&i.Currency,
			&i.Status,
			&i.Type,
			&i.PaymentMethodType,
			&i.PaymentMethodID,
			&i.AuthGuid,
			&i.AuthResp,
			&i.AuthCode,
			&i.AuthRespText,
			&i.AuthCardType,
			&i.AuthAvs,
			&i.AuthCvv2,
			&i.IdempotencyKey,
			&i.Metadata,
			&i.DeletedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTransactions = `-- name: ListTransactions :many
SELECT id, group_id, agent_id, customer_id, amount, currency, status, type, payment_method_type, payment_method_id, auth_guid, auth_resp, auth_code, auth_resp_text, auth_card_type, auth_avs, auth_cvv2, idempotency_key, metadata, deleted_at, created_at, updated_at FROM transactions
WHERE
    ($1::varchar IS NULL OR agent_id = $1) AND
    ($2::varchar IS NULL OR customer_id = $2) AND
    ($3::uuid IS NULL OR group_id = $3) AND
    ($4::varchar IS NULL OR status = $4) AND
    ($5::varchar IS NULL OR type = $5) AND
    ($6::uuid IS NULL OR payment_method_id = $6)
ORDER BY created_at DESC
LIMIT $8 OFFSET $7
`

type ListTransactionsParams struct {
	AgentID         pgtype.Text `json:"agent_id"`
	CustomerID      pgtype.Text `json:"customer_id"`
	GroupID         pgtype.UUID `json:"group_id"`
	Status          pgtype.Text `json:"status"`
	Type            pgtype.Text `json:"type"`
	PaymentMethodID pgtype.UUID `json:"payment_method_id"`
	OffsetVal       int32       `json:"offset_val"`
	LimitVal        int32       `json:"limit_val"`
}

func (q *Queries) ListTransactions(ctx context.Context, arg ListTransactionsParams) ([]Transaction, error) {
	rows, err := q.db.Query(ctx, listTransactions,
		arg.AgentID,
		arg.CustomerID,
		arg.GroupID,
		arg.Status,
		arg.Type,
		arg.PaymentMethodID,
		arg.OffsetVal,
		arg.LimitVal,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transaction{}
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.GroupID,
			&i.AgentID,
			&i.CustomerID,
			&i.Amount,
			&i.Currency,
			&i.Status,
			&i.Type,
			&i.PaymentMethodType,
			&i.PaymentMethodID,
			&i.AuthGuid,
			&i.AuthResp,
			&i.AuthCode,
			&i.AuthRespText,
			&i.AuthCardType,
			&i.AuthAvs,
			&i.AuthCvv2,
			&i.IdempotencyKey,
			&i.Metadata,
			&i.DeletedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTransaction = `-- name: UpdateTransaction :one
UPDATE transactions
SET
    status = $1,
    auth_resp = $2,
    auth_code = $3,
    auth_resp_text = $4,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $5
RETURNING id, group_id, agent_id, customer_id, amount, currency, status, type, payment_method_type, payment_method_id, auth_guid, auth_resp, auth_code, auth_resp_text, auth_card_type, auth_avs, auth_cvv2, idempotency_key, metadata, deleted_at, created_at, updated_at
`

type UpdateTransactionParams struct {
	Status       string      `json:"status"`
	AuthResp     pgtype.Text `json:"auth_resp"`
	AuthCode     pgtype.Text `json:"auth_code"`
	AuthRespText pgtype.Text `json:"auth_resp_text"`
	ID           uuid.UUID   `json:"id"`
}

func (q *Queries) UpdateTransaction(ctx context.Context, arg UpdateTransactionParams) (Transaction, error) {
	row := q.db.QueryRow(ctx, updateTransaction,
		arg.Status,
		arg.AuthResp,
		arg.AuthCode,
		arg.AuthRespText,
		arg.ID,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.GroupID,
		&i.AgentID,
		&i.CustomerID,
		&i.Amount,
		&i.Currency,
		&i.Status,
		&i.Type,
		&i.PaymentMethodType,
		&i.PaymentMethodID,
		&i.AuthGuid,
		&i.AuthResp,
		&i.AuthCode,
		&i.AuthRespText,
		&i.AuthCardType,
		&i.AuthAvs,
		&i.AuthCvv2,
		&i.IdempotencyKey,
		&i.Metadata,
		&i.DeletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateTransactionStatus = `-- name: UpdateTransactionStatus :exec
UPDATE transactions
SET status = $1, updated_at = CURRENT_TIMESTAMP
WHERE id = $2
`

type UpdateTransactionStatusParams struct {
	Status string    `json:"status"`
	ID     uuid.UUID `json:"id"`
}

func (q *Queries) UpdateTransactionStatus(ctx context.Context, arg UpdateTransactionStatusParams) error {
	_, err := q.db.Exec(ctx, updateTransactionStatus, arg.Status, arg.ID)
	return err
}

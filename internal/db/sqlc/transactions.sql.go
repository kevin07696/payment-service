// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: transactions.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createTransaction = `-- name: CreateTransaction :exec
INSERT INTO transactions (
    id, merchant_id, customer_id, amount, currency, status, type,
    payment_method_type, payment_method_token, gateway_transaction_id,
    gateway_response_code, gateway_response_message, idempotency_key, metadata
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14
)
`

type CreateTransactionParams struct {
	ID                     uuid.UUID      `json:"id"`
	MerchantID             string         `json:"merchant_id"`
	CustomerID             pgtype.Text    `json:"customer_id"`
	Amount                 pgtype.Numeric `json:"amount"`
	Currency               string         `json:"currency"`
	Status                 string         `json:"status"`
	Type                   string         `json:"type"`
	PaymentMethodType      string         `json:"payment_method_type"`
	PaymentMethodToken     pgtype.Text    `json:"payment_method_token"`
	GatewayTransactionID   pgtype.Text    `json:"gateway_transaction_id"`
	GatewayResponseCode    pgtype.Text    `json:"gateway_response_code"`
	GatewayResponseMessage pgtype.Text    `json:"gateway_response_message"`
	IdempotencyKey         pgtype.Text    `json:"idempotency_key"`
	Metadata               []byte         `json:"metadata"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) error {
	_, err := q.db.Exec(ctx, createTransaction,
		arg.ID,
		arg.MerchantID,
		arg.CustomerID,
		arg.Amount,
		arg.Currency,
		arg.Status,
		arg.Type,
		arg.PaymentMethodType,
		arg.PaymentMethodToken,
		arg.GatewayTransactionID,
		arg.GatewayResponseCode,
		arg.GatewayResponseMessage,
		arg.IdempotencyKey,
		arg.Metadata,
	)
	return err
}

const getTransactionByID = `-- name: GetTransactionByID :one
SELECT id, merchant_id, customer_id, amount, currency, status, type, payment_method_type, payment_method_token, gateway_transaction_id, gateway_response_code, gateway_response_message, idempotency_key, metadata, created_at, updated_at FROM transactions
WHERE id = $1
`

func (q *Queries) GetTransactionByID(ctx context.Context, id uuid.UUID) (Transaction, error) {
	row := q.db.QueryRow(ctx, getTransactionByID, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.MerchantID,
		&i.CustomerID,
		&i.Amount,
		&i.Currency,
		&i.Status,
		&i.Type,
		&i.PaymentMethodType,
		&i.PaymentMethodToken,
		&i.GatewayTransactionID,
		&i.GatewayResponseCode,
		&i.GatewayResponseMessage,
		&i.IdempotencyKey,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTransactionByIdempotencyKey = `-- name: GetTransactionByIdempotencyKey :one
SELECT id, merchant_id, customer_id, amount, currency, status, type, payment_method_type, payment_method_token, gateway_transaction_id, gateway_response_code, gateway_response_message, idempotency_key, metadata, created_at, updated_at FROM transactions
WHERE idempotency_key = $1
`

func (q *Queries) GetTransactionByIdempotencyKey(ctx context.Context, idempotencyKey pgtype.Text) (Transaction, error) {
	row := q.db.QueryRow(ctx, getTransactionByIdempotencyKey, idempotencyKey)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.MerchantID,
		&i.CustomerID,
		&i.Amount,
		&i.Currency,
		&i.Status,
		&i.Type,
		&i.PaymentMethodType,
		&i.PaymentMethodToken,
		&i.GatewayTransactionID,
		&i.GatewayResponseCode,
		&i.GatewayResponseMessage,
		&i.IdempotencyKey,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTransactionsByCustomer = `-- name: ListTransactionsByCustomer :many
SELECT id, merchant_id, customer_id, amount, currency, status, type, payment_method_type, payment_method_token, gateway_transaction_id, gateway_response_code, gateway_response_message, idempotency_key, metadata, created_at, updated_at FROM transactions
WHERE merchant_id = $1 AND customer_id = $2
ORDER BY created_at DESC
LIMIT $3 OFFSET $4
`

type ListTransactionsByCustomerParams struct {
	MerchantID string      `json:"merchant_id"`
	CustomerID pgtype.Text `json:"customer_id"`
	Limit      int32       `json:"limit"`
	Offset     int32       `json:"offset"`
}

func (q *Queries) ListTransactionsByCustomer(ctx context.Context, arg ListTransactionsByCustomerParams) ([]Transaction, error) {
	rows, err := q.db.Query(ctx, listTransactionsByCustomer,
		arg.MerchantID,
		arg.CustomerID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transaction{}
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.MerchantID,
			&i.CustomerID,
			&i.Amount,
			&i.Currency,
			&i.Status,
			&i.Type,
			&i.PaymentMethodType,
			&i.PaymentMethodToken,
			&i.GatewayTransactionID,
			&i.GatewayResponseCode,
			&i.GatewayResponseMessage,
			&i.IdempotencyKey,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTransactionsByMerchant = `-- name: ListTransactionsByMerchant :many
SELECT id, merchant_id, customer_id, amount, currency, status, type, payment_method_type, payment_method_token, gateway_transaction_id, gateway_response_code, gateway_response_message, idempotency_key, metadata, created_at, updated_at FROM transactions
WHERE merchant_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListTransactionsByMerchantParams struct {
	MerchantID string `json:"merchant_id"`
	Limit      int32  `json:"limit"`
	Offset     int32  `json:"offset"`
}

func (q *Queries) ListTransactionsByMerchant(ctx context.Context, arg ListTransactionsByMerchantParams) ([]Transaction, error) {
	rows, err := q.db.Query(ctx, listTransactionsByMerchant, arg.MerchantID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transaction{}
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.MerchantID,
			&i.CustomerID,
			&i.Amount,
			&i.Currency,
			&i.Status,
			&i.Type,
			&i.PaymentMethodType,
			&i.PaymentMethodToken,
			&i.GatewayTransactionID,
			&i.GatewayResponseCode,
			&i.GatewayResponseMessage,
			&i.IdempotencyKey,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTransactionStatus = `-- name: UpdateTransactionStatus :exec
UPDATE transactions
SET status = $2,
    gateway_transaction_id = COALESCE($3, gateway_transaction_id),
    gateway_response_code = COALESCE($4, gateway_response_code),
    gateway_response_message = COALESCE($5, gateway_response_message)
WHERE id = $1
`

type UpdateTransactionStatusParams struct {
	ID                     uuid.UUID   `json:"id"`
	Status                 string      `json:"status"`
	GatewayTransactionID   pgtype.Text `json:"gateway_transaction_id"`
	GatewayResponseCode    pgtype.Text `json:"gateway_response_code"`
	GatewayResponseMessage pgtype.Text `json:"gateway_response_message"`
}

func (q *Queries) UpdateTransactionStatus(ctx context.Context, arg UpdateTransactionStatusParams) error {
	_, err := q.db.Exec(ctx, updateTransactionStatus,
		arg.ID,
		arg.Status,
		arg.GatewayTransactionID,
		arg.GatewayResponseCode,
		arg.GatewayResponseMessage,
	)
	return err
}
